
DA2B_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000248  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000377  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>


int main(void)
{
 	DDRB |= (1<<DDB2);				//sets the direction of port B.2 to output
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2);			//enable pull up resistor, setting port b.2 logic high
  82:	2a 9a       	sbi	0x05, 2	; 5
	DDRD &= (0<<DDD2);				//sets the direction of port D.2 as an input
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD2);			//enable pull up resistor, setting port d.2 logic high
  88:	5a 9a       	sbi	0x0b, 2	; 11
	
	EICRA = 0x00;					//whenever the pin is low, enable interrupt
  8a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0);				//setting inturput to be looked at to be int0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	8d bb       	out	0x1d, r24	; 29
	
	sei ();							//enabling global intrupt 
  92:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00); //sets pre-scaler to 1024
  94:	85 b5       	in	r24, 0x25	; 37
  96:	85 60       	ori	r24, 0x05	; 5
  98:	85 bd       	out	0x25, r24	; 37
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x1a>

0000009c <__vector_1>:
	
	while(1);						//wait here until something happens
}
	ISR (INT0_vect)					//inturupt subroutine
	{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	89 e4       	ldi	r24, 0x49	; 73
		while(Count < 73){
			PORTB &= (0<<PORTB2);
			while ((TIFR0 & 0X01)==0)
			;
			TCNT0 = 0;					//set counter to 0
			TIFR0 = 0X01;				//clear flag
  ae:	91 e0       	ldi	r25, 0x01	; 1
}
	ISR (INT0_vect)					//inturupt subroutine
	{
		uint8_t Count = 0;
		while(Count < 73){
			PORTB &= (0<<PORTB2);
  b0:	25 b1       	in	r18, 0x05	; 5
  b2:	15 b8       	out	0x05, r1	; 5
			while ((TIFR0 & 0X01)==0)
  b4:	a8 9b       	sbis	0x15, 0	; 21
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <__vector_1+0x18>
			;
			TCNT0 = 0;					//set counter to 0
  b8:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0X01;				//clear flag
  ba:	95 bb       	out	0x15, r25	; 21
  bc:	81 50       	subi	r24, 0x01	; 1
	while(1);						//wait here until something happens
}
	ISR (INT0_vect)					//inturupt subroutine
	{
		uint8_t Count = 0;
		while(Count < 73){
  be:	c1 f7       	brne	.-16     	; 0xb0 <__vector_1+0x14>
			TIFR0 = 0X01;				//clear flag
			Count++;					//increment count by 1
		//while (TCNT1 < 19530)		//whenever the counter is less than 
			
		}
		PORTB |= (1<<PORTB2);
  c0:	2a 9a       	sbi	0x05, 2	; 5
	}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
