
DA2C_A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022c  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036c  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

int Count = 0;
int main(void)
{
	DDRB |= (1<<DDB2);		//SETS DIRECTION OF PORT B2 AS OUTPUT
  90:	22 9a       	sbi	0x04, 2	; 4
	TCNT0 = 0x8F;			//SETS HIGHEST VALUE FOR TIMMER 0x8F
  92:	8f e8       	ldi	r24, 0x8F	; 143
  94:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;			//SETS TIMMER TO BE NORMAL MODE
  96:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;			//SETS PRESCALLER TO 1024
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	85 bd       	out	0x25, r24	; 37
	while(1){
		while((TIFR0 & 0x01) == 0)	//WHEN FLAG ISNT SET STAY HERE
		;
		TCNT0 = 0x8F;		//SET TNCT BACK UP TO 0x8F
  9c:	3f e8       	ldi	r19, 0x8F	; 143
		TIFR0 = 0x01;		//CLEAR FLAG
  9e:	21 e0       	ldi	r18, 0x01	; 1
	DDRB |= (1<<DDB2);		//SETS DIRECTION OF PORT B2 AS OUTPUT
	TCNT0 = 0x8F;			//SETS HIGHEST VALUE FOR TIMMER 0x8F
	TCCR0A = 0x00;			//SETS TIMMER TO BE NORMAL MODE
	TCCR0B = 0x05;			//SETS PRESCALLER TO 1024
	while(1){
		while((TIFR0 & 0x01) == 0)	//WHEN FLAG ISNT SET STAY HERE
  a0:	a8 9b       	sbis	0x15, 0	; 21
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x10>
		;
		TCNT0 = 0x8F;		//SET TNCT BACK UP TO 0x8F
  a4:	36 bd       	out	0x26, r19	; 38
		TIFR0 = 0x01;		//CLEAR FLAG
  a6:	25 bb       	out	0x15, r18	; 21
		Count++;			//INCRIMENT COUNTER
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if(Count == 60)		//40% OF THE TIME DO THIS
  ba:	cc 97       	sbiw	r24, 0x3c	; 60
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x32>
			PORTB &= (0<<PORTB2);	//SET WAVEFORM LOW
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	15 b8       	out	0x05, r1	; 5
		if(Count == 100){	//60% OF THE TIME DO THIS
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ca:	84 36       	cpi	r24, 0x64	; 100
  cc:	91 05       	cpc	r25, r1
  ce:	41 f7       	brne	.-48     	; 0xa0 <main+0x10>
			PORTB |= (1<<PORTB2);	//SET WAVEFORM HIGH
  d0:	2a 9a       	sbi	0x05, 2	; 5
			Count = 0;		//SET COUNTER BACK TO 0
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  da:	e2 cf       	rjmp	.-60     	; 0xa0 <main+0x10>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
