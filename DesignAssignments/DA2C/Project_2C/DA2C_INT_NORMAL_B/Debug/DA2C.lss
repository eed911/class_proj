
DA2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bc  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>


int main(void)
{
	DDRB |= (1<<DDB2);		//SETS DIRECTION OF PORT B2 AS OUTPUT
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2);	//TURNS ON PULL UP RESISTOR OF PORT B2
  82:	2a 9a       	sbi	0x05, 2	; 5
	DDRD &= (0<<DDD2);		//SETS DIRECITON OF PORT D2 AS INPUT
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD2);	//TURNS ON PULL UP RESISTOR OR PORT D2
  88:	5a 9a       	sbi	0x0b, 2	; 11
	
	EICRA = 0x00;			//SETS THE INTRUPT TO ACTIVATE ON LOW LEVEL
  8a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	EIMSK = (1<<INT0);		//SETS THE INTRUPT TO BE EXTERNAL INTERUPTS 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	8d bb       	out	0x1d, r24	; 29
	sei ();					//SETS GLOBAL INTRUPT
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x14>

00000096 <__vector_1>:
	
	while(1);				//WAITS HERE FOR INTRUPT
}
ISR (INT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	uint8_t Count = 0;
	TIMSK0 |= (1<<TOIE0);
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
	sei ();
  b2:	78 94       	sei
	TCCR0B |= (1<<CS02)|(1<<CS00);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
	
	while(1);				//WAITS HERE FOR INTRUPT
}
ISR (INT0_vect)
{
	uint8_t Count = 0;
  ba:	90 e0       	ldi	r25, 0x00	; 0
	TIMSK0 |= (1<<TOIE0);
	sei ();
	TCCR0B |= (1<<CS02)|(1<<CS00);
	while (Count < 75){
		PORTB &= (0<<PORTB2);//TURNS LED ON
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	15 b8       	out	0x05, r1	; 5
		if (TCNT0 <= 1)
  c0:	86 b5       	in	r24, 0x26	; 38
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	08 f4       	brcc	.+2      	; 0xc8 <__vector_1+0x32>
			Count++;
  c6:	9f 5f       	subi	r25, 0xFF	; 255
{
	uint8_t Count = 0;
	TIMSK0 |= (1<<TOIE0);
	sei ();
	TCCR0B |= (1<<CS02)|(1<<CS00);
	while (Count < 75){
  c8:	9b 34       	cpi	r25, 0x4B	; 75
  ca:	c0 f3       	brcs	.-16     	; 0xbc <__vector_1+0x26>
		PORTB &= (0<<PORTB2);//TURNS LED ON
		if (TCNT0 <= 1)
			Count++;
	}
	
	PORTB |= (1<<PORTB2);//TURNS LED OFF
  cc:	2a 9a       	sbi	0x05, 2	; 5
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_16>:

ISR (TIMER0_OVF_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1

  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
