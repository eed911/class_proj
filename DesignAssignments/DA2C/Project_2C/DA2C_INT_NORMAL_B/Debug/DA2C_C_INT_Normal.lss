
DA2C_C_INT_Normal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a0  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRB |= (1<<DDB2);
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2);
  82:	2a 9a       	sbi	0x05, 2	; 5
	DDRD &= (0<<DDD2);
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PORTD2);
  88:	5a 9a       	sbi	0x0b, 2	; 11
	
	EICRA = 0x00;
  8a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	EIMSK = (1<<INT0);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	8d bb       	out	0x1d, r24	; 29
	sei ();
  92:	78 94       	sei
	while(1)
	PORTB &= (1<<PORTB2);
  94:	85 b1       	in	r24, 0x05	; 5
  96:	84 70       	andi	r24, 0x04	; 4
  98:	85 b9       	out	0x05, r24	; 5
  9a:	fc cf       	rjmp	.-8      	; 0x94 <main+0x14>

0000009c <__vector_1>:
}
ISR (INT0_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1

	uint8_t count = 0; 
	PORTB &= (0<<PORTB2);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	15 b8       	out	0x05, r1	; 5
	TCNT0 = 0x00;
  aa:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<<CS02) | (1<<CS00);
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	85 bd       	out	0x25, r24	; 37
	while (count <5)
		if(TIFR0=0x01){
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	85 bb       	out	0x15, r24	; 21
			TCNT0 = 0x00;
  b4:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0x01;	
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <__vector_1+0x16>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
